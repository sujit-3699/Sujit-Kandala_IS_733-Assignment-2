# -*- coding: utf-8 -*-
"""Sujit Kandala_IS_733 Homework 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ni6XUBaeBLU4Y8UT_n1pDpuJnZz3RYdi
"""

!pip install pandas-profiling

import pandas as pd
import pandas_profiling as pp

# Load the dataset into a pandas DataFrame
df = pd.read_csv("red_wine.csv")

# Generate the pandas profiling report and save it as an HTML file
profile = pp.ProfileReport(df)
profile.to_file("red_wine_report.html")

import pandas as pd
from sklearn.model_selection import cross_val_score
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.dummy import DummyClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import roc_auc_score

# Load the dataset into a pandas DataFrame
df = pd.read_csv("red_wine.csv")

# Split the dataset into input features and target variable
X = df.drop('type', axis=1)
y = df['type']

# Define the machine learning models to evaluate
models = {
    'Naive Bayes': GaussianNB(),
    'Logistic regression': LogisticRegression(),
    'Zero R': DummyClassifier(strategy='most_frequent'),
    'One R': DecisionTreeClassifier(max_depth=1),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'SVM': SVC(probability=True)
}

# Initialize lists to hold the model names and their corresponding accuracy and AUC scores
model_names = []
accuracy_means = []
accuracy_stds = []
auc_means = []
auc_stds = []

# Evaluate each model using 10-fold cross-validation and calculate the accuracy and AUC metrics
for name, model in models.items():
    cv_accuracy = cross_val_score(model, X, y, cv=10, scoring='accuracy')
    cv_auc = cross_val_score(model, X, y, cv=10, scoring='roc_auc')

    # Append the results to the lists
    model_names.append(name)
    accuracy_means.append(cv_accuracy.mean() * 100) # converting mean accuracy to percentage
    accuracy_stds.append(cv_accuracy.std())
    auc_means.append(cv_auc.mean())
    auc_stds.append(cv_auc.std())

# Create a pandas DataFrame to hold the results
results_df = pd.DataFrame({
    'Model': model_names,
    'Accuracy Mean': accuracy_means,
    'AUC Mean': auc_means
})

# Print the results
print(results_df.to_string(index=False))

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_curve, roc_auc_score

# Load the dataset into a pandas DataFrame
df = pd.read_csv("red_wine.csv")

# Encode the target variable as binary values
df['type'] = (df['type'] == 'high').astype(int)

# Split the dataset into input features and target variable
X = df.drop('type', axis=1)
y = df['type']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit a Random Forest classifier on the training data
rfc = RandomForestClassifier(random_state=42)
rfc.fit(X_train, y_train)

# Predict the probabilities of the positive class on the testing data
y_pred_proba = rfc.predict_proba(X_test)

# Calculate the ROC curve and AUC score
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba[:, 1])
auc_score = roc_auc_score(y_test, y_pred_proba[:, 1])

# Plot the ROC curve
import matplotlib.pyplot as plt
plt.plot(fpr, tpr)
plt.plot([0, 1], [0, 1], linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve (AUC={:.2f})'.format(auc_score))
plt.show()

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import roc_auc_score

# Load the "white_wine.csv" dataset using pandas
data = pd.read_csv('white_wine.csv')

# Separate the features (X) and target (y) variables
X = data.drop('type', axis=1)
y = data['type']

# Scale the features using the `StandardScaler()` method
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Train a Naive Bayes classifier on the dataset
nb = GaussianNB()
nb.fit(X, y)

# Calculate the predicted probabilities of the target using the `predict_proba()` method of the classifier
y_pred_prob = nb.predict_proba(X)[:, 1]

# Calculate the AUC score using the `roc_auc_score()` function from `sklearn.metrics`
auc_score = roc_auc_score(y, y_pred_prob)

print('AUC score:', auc_score)

